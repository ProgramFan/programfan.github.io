<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:wfw="http://wellformedweb.org/CommentAPI/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
  xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
  >
  <channel>
    <title xml:lang="en">Jekyll • Simple, blog-aware, static sites</title>
    <atom:link type="application/atom+xml" href="http://jekyllrb.com/feed.xml" rel="self"/>
    <link>http://jekyllrb.com/</link>
    <pubDate>Mon, 04 May 2015 16:18:17 +0000</pubDate>
    <lastBuildDate>Mon, 04 May 2015 16:18:17 +0000</lastBuildDate>
    <language>en-US</language>
    <generator>Jekyll v2.5.3</generator>
    <description>Transform your plain text into static websites and blogs.</description>
    <image>
      <description>Transform your plain text into static websites and blogs.</description>
      <url>http://jekyllrb.com/img/logo-rss.png</url>
      <title>Jekyll • Simple, blog-aware, static sites</title>
      <link>http://jekyllrb.com/</link>
      <width>144</width>
      <height>73</height>
    </image>
    
    <item>
      <title>Join the Discussion at Jekyll Talk</title>
      <link>http://jekyllrb.com/news/2015/02/27/introducing-jekyll-talk/</link>
      <pubDate>Fri, 27 Feb 2015 05:06:51 +0000</pubDate>
      <dc:creator>alfredxing</dc:creator>
      
      
      <category>community</category>
      
      <guid isPermaLink="true">http://jekyllrb.com/news/2015/02/27/introducing-jekyll-talk/</guid>
      <description>&lt;p&gt;We’re super excited to announce the launch of &lt;a href=&quot;https://talk.jekyllrb.com&quot;&gt;Jekyll Talk&lt;/a&gt;, a Discourse forum for anything related to Jekyll!&lt;/p&gt;

&lt;p&gt;The forum was set up by &lt;a href=&quot;https://github.com/envygeeks&quot;&gt;@envygeeks&lt;/a&gt; to build a community more accessible to Jekyll users and more suitable for general discussion.&lt;/p&gt;

&lt;p&gt;There’s already been a lot of interesting topics, including a &lt;a href=&quot;https://talk.jekyllrb.com/t/showcase-sites-made-using-jekyll/18&quot;&gt;site showcase&lt;/a&gt; and &lt;a href=&quot;https://talk.jekyllrb.com/t/poll-installation-priorities-for-3-0/106/9&quot;&gt;a poll for Jekyll 3.0 priorities&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Come join the fun!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Prevent GCC from optimizing away a snippet of code</title>
      <link>http://jekyllrb.com/news/2015/01/20/prevent-gcc-optimize-away-code/</link>
      <pubDate>Tue, 20 Jan 2015 19:23:12 -0800</pubDate>
      <dc:creator>ProgramFan</dc:creator>
      
      
      <category>c++</category>
      
      <category>gcc</category>
      
      <guid isPermaLink="true">http://jekyllrb.com/news/2015/01/20/prevent-gcc-optimize-away-code/</guid>
      <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nowadays compilers are extremely capable of elimiting &#39;dead&#39; code. But in
benchmarking we need some seemingly &#39;useless&#39; code to do the work we want. For
example, to do computation in registers in order to measure instruction
latency and throughput. In these cases, we need a mechanism to temporarily
disable optimization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This document keep an up-to-date collections of techniques to temporarily
disable compiler optimizations. These techniques are tested on a recent gcc or
icc compiler.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;using-volatile&quot;&gt;Using volatile&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;volatile&lt;/code&gt; makes compilers be extremely careful (or conservative) on memory
load and store of a variable. Most compilers tend to do no optimizations at
all (even for proven dead code). So the &lt;code&gt;volatile&lt;/code&gt; technique becomes the top 1
used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color: #B00040&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;doTest&lt;/span&gt;() {
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;volatile&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;int&lt;/span&gt; a &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt;;
    a &lt;span style=&quot;color: #666666&quot;&gt;+=&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;g++ -std=c++98 -O2&lt;/code&gt; compiles the above code down to&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;asm&quot;&gt;&lt;span style=&quot;color: #0000FF&quot;&gt;movl&lt;/span&gt;   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;0x0&lt;/span&gt;,&lt;span style=&quot;color: #666666&quot;&gt;-0x4&lt;/span&gt;(&lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;rsp&lt;/span&gt;)
&lt;span style=&quot;color: #0000FF&quot;&gt;mov&lt;/span&gt;    &lt;span style=&quot;color: #666666&quot;&gt;-0x4&lt;/span&gt;(&lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;rsp&lt;/span&gt;),&lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;eax&lt;/span&gt;
&lt;span style=&quot;color: #0000FF&quot;&gt;add&lt;/span&gt;    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;0x1&lt;/span&gt;,&lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;eax&lt;/span&gt;
&lt;span style=&quot;color: #0000FF&quot;&gt;mov&lt;/span&gt;    &lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;eax&lt;/span&gt;,&lt;span style=&quot;color: #666666&quot;&gt;-0x4&lt;/span&gt;(&lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;rsp&lt;/span&gt;)
&lt;span style=&quot;color: #0000FF&quot;&gt;retq&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;icpc -std=c++98 -O2&lt;/code&gt; compiles it down to&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;asm&quot;&gt;&lt;span style=&quot;color: #0000FF&quot;&gt;movl&lt;/span&gt;   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;0x0&lt;/span&gt;,&lt;span style=&quot;color: #666666&quot;&gt;-0x8&lt;/span&gt;(&lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;rsp&lt;/span&gt;)
&lt;span style=&quot;color: #0000FF&quot;&gt;incl&lt;/span&gt;   &lt;span style=&quot;color: #666666&quot;&gt;-0x8&lt;/span&gt;(&lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;rsp&lt;/span&gt;)
&lt;span style=&quot;color: #0000FF&quot;&gt;retq&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;empty-assembly&quot;&gt;Empty assembly&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another current weakness of compilers is that they are careful with inline
assembly. Some version of gcc and icc tends to leave inline assembly touched
variable intact. This becomes the second technique to prevent optimizations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, Facebook&amp;#8217;s &lt;a href=&quot;http://github.com/facebook/folly&quot;&gt;Folly&lt;/a&gt; library uses
the following &lt;code&gt;doNotOptimizeAway&lt;/code&gt; function to prevent optimizing an
expression:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;template&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;typename&lt;/span&gt; T&lt;span style=&quot;color: #666666&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;inline&lt;/span&gt; doNotOptimizeAway(T&lt;span style=&quot;color: #666666&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; datum) {
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;asm&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;volatile&lt;/span&gt; (&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;+r&amp;quot;&lt;/span&gt; datum);
}
&lt;span style=&quot;color: #B00040&quot;&gt;void&lt;/span&gt; doTest() {
    &lt;span style=&quot;color: #B00040&quot;&gt;int&lt;/span&gt; a;
    doNotOptimizeAway(a &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt;);
    doNotOptimizeAway(a &lt;span style=&quot;color: #666666&quot;&gt;+=&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;16&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;icpc -std=c++11 -O2&lt;/code&gt; compiles the above down to&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;asm&quot;&gt;&lt;span style=&quot;color: #0000FF&quot;&gt;movl&lt;/span&gt;   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;0x0&lt;/span&gt;,&lt;span style=&quot;color: #666666&quot;&gt;-0x8&lt;/span&gt;(&lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;rsp&lt;/span&gt;)
&lt;span style=&quot;color: #0000FF&quot;&gt;mov&lt;/span&gt;    &lt;span style=&quot;color: #666666&quot;&gt;-0x8&lt;/span&gt;(&lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;rsp&lt;/span&gt;),&lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;eax&lt;/span&gt;
&lt;span style=&quot;color: #0000FF&quot;&gt;mov&lt;/span&gt;    &lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;eax&lt;/span&gt;,&lt;span style=&quot;color: #666666&quot;&gt;-0x8&lt;/span&gt;(&lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;rsp&lt;/span&gt;)
&lt;span style=&quot;color: #0000FF&quot;&gt;addl&lt;/span&gt;   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;0x10&lt;/span&gt;,&lt;span style=&quot;color: #666666&quot;&gt;-0x8&lt;/span&gt;(&lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;rsp&lt;/span&gt;)
&lt;span style=&quot;color: #0000FF&quot;&gt;mov&lt;/span&gt;    &lt;span style=&quot;color: #666666&quot;&gt;-0x8&lt;/span&gt;(&lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;rsp&lt;/span&gt;),&lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;edx&lt;/span&gt;
&lt;span style=&quot;color: #0000FF&quot;&gt;mov&lt;/span&gt;    &lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;edx&lt;/span&gt;,&lt;span style=&quot;color: #666666&quot;&gt;-0x8&lt;/span&gt;(&lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;rsp&lt;/span&gt;)
&lt;span style=&quot;color: #0000FF&quot;&gt;incl&lt;/span&gt;   &lt;span style=&quot;color: #666666&quot;&gt;-0x8&lt;/span&gt;(&lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;rsp&lt;/span&gt;)
&lt;span style=&quot;color: #0000FF&quot;&gt;mov&lt;/span&gt;    &lt;span style=&quot;color: #666666&quot;&gt;-0x8&lt;/span&gt;(&lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;rsp&lt;/span&gt;),&lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;ecx&lt;/span&gt;
&lt;span style=&quot;color: #0000FF&quot;&gt;mov&lt;/span&gt;    &lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;ecx&lt;/span&gt;,&lt;span style=&quot;color: #666666&quot;&gt;-0x8&lt;/span&gt;(&lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;rsp&lt;/span&gt;)
&lt;span style=&quot;color: #0000FF&quot;&gt;retq&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;g++ -std=c++11 -O2&lt;/code&gt; compiles straightly down to&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;asm&quot;&gt;&lt;span style=&quot;color: #0000FF&quot;&gt;xor&lt;/span&gt;    &lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;eax&lt;/span&gt;,&lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;eax&lt;/span&gt;
&lt;span style=&quot;color: #0000FF&quot;&gt;add&lt;/span&gt;    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;0x10&lt;/span&gt;,&lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;eax&lt;/span&gt;
&lt;span style=&quot;color: #0000FF&quot;&gt;retq&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The &lt;code&gt;+r&lt;/code&gt; modifier and the volatile modifier in the assembly is
essential. &lt;code&gt;+r&lt;/code&gt; means the &lt;code&gt;datum&lt;/code&gt; is both read from and write to by the
assembly, so compiler can not optimized it out. &lt;code&gt;volatile&lt;/code&gt; stops the compiler
from removing the empty assembly. If you try &lt;code&gt;=r&lt;/code&gt; instead of &lt;code&gt;+r&lt;/code&gt;, gcc will
optimize it away but icc will keep it.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;compiler-specific-pragma&quot;&gt;Compiler specific pragma&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Compilers provides ways to control their optimizer. gcc provides &lt;code&gt;pragma GCC&lt;/code&gt; as a way to control temporarily the compiler behavior. By using &lt;code&gt;pragma GCC optimize(&quot;O0&quot;)&lt;/code&gt;, the optimization level can be set to zero, which means absolutely no optimize for gcc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color: #BC7A00&quot;&gt;#pragma GCC push_options&lt;/span&gt;
&lt;span style=&quot;color: #BC7A00&quot;&gt;#pragma GCC optimize(&amp;quot;O0&amp;quot;)&lt;/span&gt;
&lt;span style=&quot;color: #B00040&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;doTest&lt;/span&gt;() {
    &lt;span style=&quot;color: #B00040&quot;&gt;int&lt;/span&gt; a;  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    a &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;15&lt;/span&gt;;
    a &lt;span style=&quot;color: #666666&quot;&gt;+=&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;;
}
&lt;span style=&quot;color: #BC7A00&quot;&gt;#pragma GCC pop_options&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This is a callout.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;g++ -std=c++98 -O2&lt;/code&gt; compiles it straight forwardly down to&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;asm&quot;&gt;&lt;span style=&quot;color: #0000FF&quot;&gt;movl&lt;/span&gt;   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;0xf&lt;/span&gt;,&lt;span style=&quot;color: #666666&quot;&gt;-0x4&lt;/span&gt;(&lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;rsp&lt;/span&gt;)
&lt;span style=&quot;color: #0000FF&quot;&gt;addl&lt;/span&gt;   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;0x1&lt;/span&gt;,&lt;span style=&quot;color: #666666&quot;&gt;-0x4&lt;/span&gt;(&lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;rsp&lt;/span&gt;)
&lt;span style=&quot;color: #0000FF&quot;&gt;retq&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;icpc -std=c++98 -O2&lt;/code&gt; compiles it down to&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;asm&quot;&gt;&lt;span style=&quot;color: #0000FF&quot;&gt;sub&lt;/span&gt;    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;0x10&lt;/span&gt;,&lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;rsp&lt;/span&gt;
&lt;span style=&quot;color: #0000FF&quot;&gt;movl&lt;/span&gt;   &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;0xf&lt;/span&gt;,&lt;span style=&quot;color: #666666&quot;&gt;-0x10&lt;/span&gt;(&lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;rbp&lt;/span&gt;)
&lt;span style=&quot;color: #0000FF&quot;&gt;mov&lt;/span&gt;    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;0x1&lt;/span&gt;,&lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;eax&lt;/span&gt;
&lt;span style=&quot;color: #0000FF&quot;&gt;add&lt;/span&gt;    &lt;span style=&quot;color: #666666&quot;&gt;-0x10&lt;/span&gt;(&lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;rbp&lt;/span&gt;),&lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;eax&lt;/span&gt;
&lt;span style=&quot;color: #0000FF&quot;&gt;mov&lt;/span&gt;    &lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;eax&lt;/span&gt;,&lt;span style=&quot;color: #666666&quot;&gt;-0x10&lt;/span&gt;(&lt;span style=&quot;color: #666666&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;rbp&lt;/span&gt;)
&lt;span style=&quot;color: #0000FF&quot;&gt;leaveq&lt;/span&gt;
&lt;span style=&quot;color: #0000FF&quot;&gt;retq&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although icc does a strange transformation to the code, it leaves the code any
way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The above pragma can be replaced by function attribute
&lt;code&gt;__attribute__((optimize(&quot;O0&quot;)))&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Jekyll Meet &amp; Greet at GitHub HQ</title>
      <link>http://jekyllrb.com/news/2015/01/20/jekyll-meet-and-greet/</link>
      <pubDate>Tue, 20 Jan 2015 19:23:12 -0800</pubDate>
      <dc:creator>parkr</dc:creator>
      
      
      <category>meetup</category>
      
      <guid isPermaLink="true">http://jekyllrb.com/news/2015/01/20/jekyll-meet-and-greet/</guid>
      <description>&lt;p&gt;Hey! Our friends at GitHub have agreed to host a Jekyll meet &amp;amp; greet on
&lt;strong&gt;February 5, 2015 at 7pm&lt;/strong&gt;. The event will be hosted at
&lt;a href=&quot;https://goo.gl/maps/Bmy7i&quot;&gt;GitHub’s Headquarters&lt;/a&gt;
here in San Francisco, CA. Pizza &amp;amp; beer will be available for those interested,
and there will be much time to sit and chat about all things Jekyll. This would
be an especially good time to get help with bugs you’ve encountered or to talk
over a potential feature with the core team in attendance.&lt;/p&gt;

&lt;p&gt;A special thanks to &lt;a href=&quot;https://github.com/gjtorikian&quot;&gt;@gjtorikian&lt;/a&gt; for making this
all possible! You rock.&lt;/p&gt;

&lt;p&gt;We look forward to meeting all you fine folks. Cheers!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
